-- VHDL Entity DASLIB.hdb3_1.interface
--
-- Created:
--          by - 879291.UNKNOWN (PC143412)
--          at - 12:40:28 22-03-2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY hdb3_1 IS
   PORT( 
      bits      : IN     std_logic_vector (3 DOWNTO 0);
      clk       : IN     std_logic;
      nrst      : IN     std_logic;
      syncadd_c : IN     std_logic;
      LWout     : OUT    std_logic;
      hmin      : OUT    std_logic;
      hnul      : OUT    std_logic;
      hplus     : OUT    std_logic
   );

-- Declarations

END hdb3_1 ;

--
-- VHDL Architecture DASLIB.hdb3_1.asm
--
-- Created:
--          by - 879291.UNKNOWN (PC143412)
--          at - 12:40:28 22-03-2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE asm OF hdb3_1 IS

   TYPE STATE_TYPE IS (
      rstate,
      s4,
      s5,
      s3,
      s0,
      s1,
      s2,
      s6,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12,
      s13,
      s14
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      nrst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (nrst = '0') THEN
         current_state <= rstate;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      bits,
      current_state,
      syncadd_c
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN rstate => 
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     next_state <= s4;
                  ELSE
                     next_state <= rstate;
                  END IF;
               ELSE
                  next_state <= s2;
               END IF;
            ELSE
               next_state <= rstate;
            END IF;
         WHEN s4 => 
            next_state <= s5;
         WHEN s5 => 
            next_state <= s3;
         WHEN s3 => 
            next_state <= s1;
         WHEN s0 => 
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     next_state <= s6;
                  ELSE
                     next_state <= s0;
                  END IF;
               ELSE
                  next_state <= s1;
               END IF;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     next_state <= s9;
                  ELSE
                     next_state <= s1;
                  END IF;
               ELSE
                  next_state <= s0;
               END IF;
            ELSE
               next_state <= s1;
            END IF;
         WHEN s2 => 
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     next_state <= s12;
                  ELSE
                     next_state <= s2;
                  END IF;
               ELSE
                  next_state <= rstate;
               END IF;
            ELSE
               next_state <= s2;
            END IF;
         WHEN s6 => 
            next_state <= s7;
         WHEN s7 => 
            next_state <= s8;
         WHEN s8 => 
            next_state <= s2;
         WHEN s9 => 
            next_state <= s10;
         WHEN s10 => 
            next_state <= s11;
         WHEN s11 => 
            next_state <= s2;
         WHEN s12 => 
            next_state <= s13;
         WHEN s13 => 
            next_state <= s14;
         WHEN s14 => 
            next_state <= s1;
         WHEN OTHERS =>
            next_state <= rstate;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      bits,
      current_state,
      syncadd_c
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN rstate => 
            LWout <='1';
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     hmin <= '0';
                     hnul <= '1';
                     hplus <= '0';
                  ELSE
                     hmin <= '0';
                     hnul <= '1';
                     hplus <= '0';
                  END IF;
               ELSE
                  hmin <= '1';
                  hnul <= '0';
                  hplus <= '0';
               END IF;
            ELSE
               hmin <= '0';
               hnul <= '0';
               hplus <= '1';
            END IF;
         WHEN s4 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <= '1' ;
         WHEN s5 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <= '1' ;
         WHEN s3 => 
            hmin <= '0';
            hnul <= '0';
            hplus <= '1';
            LWout <= '1' ;
         WHEN s0 => 
            LWout <='0';
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     hmin <= '0';
                     hnul <= '1';
                     hplus <= '0';
                  ELSE
                     hmin <= '0';
                     hnul <= '1';
                     hplus <= '0';
                  END IF;
               ELSE
                  hmin <= '0';
                  hnul <= '0';
                  hplus <= '1';
               END IF;
            ELSE
               hmin <= '1';
               hnul <= '0';
               hplus <= '0';
            END IF;
         WHEN s1 => 
            LWout <='1';
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     hmin <= '1';
                     hnul <= '0';
                     hplus <= '0';
                  ELSE
                     hmin <= '0';
                     hnul <= '1';
                     hplus <= '0';
                  END IF;
               ELSE
                  hmin <= '1';
                  hnul <= '0';
                  hplus <= '0';
               END IF;
            ELSE
               hmin <= '0';
               hnul <= '0';
               hplus <= '1';
            END IF;
         WHEN s2 => 
            LWout <='0';
            IF (syncadd_c = '0') THEN 
               IF (bits(3) = '0' ) THEN 
                  IF (bits = "0000") THEN 
                     hmin <= '0';
                     hnul <= '0';
                     hplus <= '1';
                  ELSE
                     hmin <= '0';
                     hnul <= '1';
                     hplus <= '0';
                  END IF;
               ELSE
                  hmin <= '0';
                  hnul <= '0';
                  hplus <= '1';
               END IF;
            ELSE
               hmin <= '1';
               hnul <= '0';
               hplus <= '0';
            END IF;
         WHEN s6 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <='0';
         WHEN s7 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <='0';
         WHEN s8 => 
            hmin <= '1';
            hnul <= '0';
            hplus <= '0';
            LWout <='0';
         WHEN s9 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <= '0' ;
         WHEN s10 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <= '0' ;
         WHEN s11 => 
            hmin <= '1';
            hnul <= '0';
            hplus <= '0';
            LWout <='0';
         WHEN s12 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <= '1' ;
         WHEN s13 => 
            hmin <= '0';
            hnul <= '1';
            hplus <= '0';
            LWout <= '1' ;
         WHEN s14 => 
            hmin <= '0';
            hnul <= '0';
            hplus <= '1';
            LWout <= '1' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END asm;
