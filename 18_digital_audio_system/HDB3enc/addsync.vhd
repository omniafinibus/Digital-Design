-- VHDL Entity das1_lib.addsync.interface
--
-- Created:
--          by - tygtr.UNKNOWN (DESKTOP-8NRVV0H)
--          at - 13:08:31 08/18/2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY addsync IS
   PORT( 
      Lwino    : IN     std_logic;
      clk      : IN     std_logic;
      hmino    : IN     std_logic;
      hnulo    : IN     std_logic;
      hpluso   : IN     std_logic;
      nrst     : IN     std_logic;
      syncaddo : IN     std_logic;
      mino     : OUT    std_logic;
      nulo     : OUT    std_logic;
      pluso    : OUT    std_logic
   );

-- Declarations

END addsync ;

--
-- VHDL Architecture das1_lib.addsync.asm
--
-- Created:
--          by - tygtr.UNKNOWN (DESKTOP-8NRVV0H)
--          at - 13:08:31 08/18/2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE asm OF addsync IS

   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s8,
      s9
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      nrst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (nrst = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      Lwino,
      current_state,
      syncaddo
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF ( syncaddo = '1' ) THEN 
               IF ( Lwino = '0' ) THEN 
                  next_state <= s1;
               ELSE
                  next_state <= s8;
               END IF;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s1 => 
            IF ( syncaddo = '1' ) THEN 
               next_state <= s2;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s2 => 
            IF ( syncaddo = '1' ) THEN 
               next_state <= s8;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s8 => 
            IF ( syncaddo = '1' ) THEN 
               next_state <= s9;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s9 => 
            IF ( syncaddo = '1' ) THEN 
               next_state <= s1;
            ELSE
               next_state <= s0;
            END IF;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      Lwino,
      current_state,
      hmino,
      hnulo,
      hpluso,
      syncaddo
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            IF ( syncaddo = '1' ) THEN 
               IF ( Lwino = '0' ) THEN 
                   pluso <= '1' ; 
                   mino <= '0' ; 
                   nulo <= '0' ;
               ELSE
                   pluso <= '0' ; 
                   mino <= '1' ; 
                   nulo <= '0' ;
               END IF;
            ELSE
                pluso <= hpluso ; 
                mino <= hmino ; 
                nulo <= hnulo ;
            END IF;
         WHEN s1 => 
             pluso <= '1' ; 
             mino <= '0' ; 
             nulo <= '0' ;
         WHEN s2 => 
             pluso <= '0' ; 
             mino <= '1' ; 
             nulo <= '0' ;
         WHEN s8 => 
             pluso <= '0' ; 
             mino <= '1' ; 
             nulo <= '0' ;
         WHEN s9 => 
             pluso <= '1' ; 
             mino <= '0' ; 
             nulo <= '0' ;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END asm;
