-- VHDL Entity DASLIB.hdb3decod.interface
--
-- Created:
--          by - 879291.UNKNOWN (PC143412)
--          at - 12:40:28 22-03-2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY hdb3decod IS
   PORT( 
      nrst  : IN     std_logic;
      clk   : IN     std_logic;
      nuls  : IN     std_logic_vector (3 DOWNTO 0);
      mins  : IN     std_logic_vector (3 DOWNTO 0);
      pluss : IN     std_logic_vector (3 DOWNTO 0);
      LWout : OUT    std_logic;
      LWin  : IN     std_logic;
      sbits : OUT    std_logic
   );

-- Declarations

END hdb3decod ;

--
-- VHDL Architecture DASLIB.hdb3decod.asm
--
-- Created:
--          by - 879291.UNKNOWN (PC143412)
--          at - 12:40:28 22-03-2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE asm OF hdb3decod IS

   TYPE STATE_TYPE IS (
      s0,
      s2,
      s3,
      s4
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      nrst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (nrst = '0') THEN
         current_state <= s0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      LWin,
      current_state,
      mins,
      nuls,
      pluss
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN s0 => 
            IF (Pluss="1001" and nuls = "0110") THEN 
               next_state <= s2;
            ELSIF (mins="1001" and nuls = "0110") THEN 
               next_state <= s2;
            ELSIF (pluss(0) = '1' and nuls (3 downto 1) = "111" ) THEN 
               IF (LWin='1') THEN 
                  next_state <= s2;
               ELSE
                  next_state <= s0;
               END IF;
            ELSIF (mins(0) = '1' and nuls (3 downto 1) = "111" ) THEN 
               IF (Lwin='1') THEN 
                  next_state <= s0;
               ELSE
                  next_state <= s2;
               END IF;
            ELSE
               next_state <= s0;
            END IF;
         WHEN s2 => 
            next_state <= s3;
         WHEN s3 => 
            next_state <= s4;
         WHEN s4 => 
            next_state <= s0;
         WHEN OTHERS =>
            next_state <= s0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      LWin,
      current_state,
      mins,
      nuls,
      pluss
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN s0 => 
            IF (Pluss="1001" and nuls = "0110") THEN 
               Lwout<='1';
                sbits<='0';
            ELSIF (mins="1001" and nuls = "0110") THEN 
               Lwout<='0';
                sbits<='0';
            ELSIF (pluss(0) = '1' and nuls (3 downto 1) = "111" ) THEN 
               IF (LWin='1') THEN 
                  Lwout<='1';
                   sbits<='0';
               ELSE
                  Lwout<='0';
                   sbits<='0';
               END IF;
            ELSIF (mins(0) = '1' and nuls (3 downto 1) = "111" ) THEN 
               IF (Lwin='1') THEN 
                  Lwout<='1';
                   sbits<='0';
               ELSE
                  Lwout<='0';
                   sbits<='0';
               END IF;
            ELSE
               IF (nuls(3)='1') THEN
                   sbits<='0';Lwout<=Lwin;
               ELSE
                   sbits<='1';Lwout<= not Lwin;
               END IF;
            END IF;
         WHEN s2 => 
            sbits<='0';
         WHEN s3 => 
             sbits<='0';
         WHEN s4 => 
             sbits<='0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END asm;
