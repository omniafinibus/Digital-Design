-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Altera Program License
-- Subscription Agreement, the Altera Quartus Prime License Agreement,
-- the Altera MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Altera and sold by Altera or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 15.1 (Build Build 185 10/21/2015)
-- Created on Sun May 07 15:57:04 2017

LIBRARY ieee;
USE ieee.std_logic_1164.all;


--  Entity Declaration

ENTITY oneshot_block IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		enab    : IN STD_LOGIC;
		sys_clk : IN STD_LOGIC;
		nrst    : IN STD_LOGIC;
		man_clk : OUT STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END oneshot_block;


--  Architecture Body

ARCHITECTURE oneshot_block_architecture OF oneshot_block IS
	signal nextstate,presentstate : string(1 to 2);

BEGIN
	NSdec: process(presentstate,enab)
		variable n_s : string(1 to 2);
	begin
		case presentstate is
			when "S0" => if enab = '0' then n_s := "S1"; else n_s := "S0"; end if;
			when "S1" => n_s := "S2";
			when "S2" => if enab = '1' then n_s := "S0"; else n_s := "S2"; end if;
			when others => n_s := "--";
		end case;
		nextstate <= n_s after 1 ns;
	end process;
	
	Mem: process(nrst,sys_clk)
	begin
		if nrst='0' then
			presentstate <= "S0" after 1 ns;
		elsif rising_edge(sys_clk) then
			presentstate <= nextstate after 1 ns;
		end if;
	end process;
	
	OutDec: process(presentstate)
		
	begin
		-- put all outputs to the default value so you only have to write later when one signal is active only
		man_clk <= '0' after 1 ns;
		
		-- next is to write down when a output is active
		if presentstate = "S1" then 
			man_clk <= '1' after 1 ns; 
		end if;
		
	end process;	

END oneshot_block_architecture;
